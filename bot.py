import logging
import os
import json
from datetime import date, datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–¥–∞–µ—Ç—Å—è –≤ .env —Ñ–∞–π–ª–µ)
TARGET_GROUP_ID = os.getenv('TARGET_GROUP_ID', '-1002904494745')

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
DAILY_MESSAGE_LIMIT = 10

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'bot_data.json'

class MessageForwarderBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –ö–æ–º–∞–Ω–¥–∞ /help —É–¥–∞–ª–µ–Ω–∞
        
        # ID –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–µ—Ç—Å—è –≤ .env —Ñ–∞–π–ª–µ, –∫–æ–º–∞–Ω–¥–∞ /setgroup —É–¥–∞–ª–µ–Ω–∞
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–¥–∏–∞)
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & ~filters.CAPTION, 
            self.forward_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ)
        self.application.add_handler(MessageHandler(
            filters.PHOTO | filters.VIDEO | filters.Document.ALL | filters.AUDIO | filters.VOICE,
            self.forward_media
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!

üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

üîß –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º

üí° –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç:
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –§–æ—Ç–æ

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ß–∞—Ç ‚Äî https://t.me/spletnikolcovo

–°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞ ‚Äî https://t.me/vkolcovolubyate

‚ÄºÔ∏è–ü–†–ê–í–ò–õ–ê‚ÄºÔ∏è

1. –ù–µ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ 
2. –ù–µ –æ—Å–∫–≤–µ—Ä–Ω—è—Ç—å —Ä–µ–ª–∏–≥–∏–∏ 
3. –ó–∞–ø—Ä–µ—Ç –Ω–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–ª–∞–º—É 

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–∫–ª–∞–º—ã –∫ –∞–¥–º–∏–Ω—É - @kolcovoloveadm

        """
        await update.message.reply_text(welcome_message)
    
    def load_data(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(DATA_FILE):
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if self.prune_old_data(data):
                    self.save_data(data)
                return data
        except Exception as e:
            logger.error(f"Error loading data: {e}")
        return {}
    
    def save_data(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving data: {e}")

    def prune_old_data(self, data: dict) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ –∏–∑ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
        changed = False

        try:
            # –û—á–∏—Å—Ç–∫–∞ user_info –ø–æ timestamp (—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            if isinstance(data, dict) and 'user_info' in data and isinstance(data['user_info'], dict):
                now_ts = datetime.utcnow().timestamp()
                cutoff_ts = now_ts - 24 * 60 * 60
                keys_to_delete = []
                for key, value in list(data['user_info'].items()):
                    try:
                        if isinstance(value, dict) and float(value.get('timestamp', 0)) < cutoff_ts:
                            keys_to_delete.append(key)
                    except Exception:
                        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        keys_to_delete.append(key)
                for key in keys_to_delete:
                    del data['user_info'][key]
                    changed = True

            # –û—á–∏—Å—Ç–∫–∞ daily_limits –ø–æ –¥–∞—Ç–µ (—É–¥–∞–ª—è–µ–º –¥–∞—Ç—ã —Å—Ç–∞—Ä—à–µ —á–µ–º 2 –¥–Ω—è –æ—Ç —Ç–µ–∫—É—â–µ–π)
            # –¢–∞–∫ –∫–∞–∫ daily_limits —Ö—Ä–∞–Ω–∏—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ –¥–Ω—é, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ —Å—É—Ç–æ–∫ –ø—Ä–∏–µ–º–ª–µ–º–∞.
            if isinstance(data, dict) and 'daily_limits' in data and isinstance(data['daily_limits'], dict):
                today = date.today()
                keys_to_delete = []
                for day_str in list(data['daily_limits'].keys()):
                    try:
                        day_obj = date.fromisoformat(day_str)
                        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤: —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ (today - 1 –¥–µ–Ω—å)
                        if day_obj < (today - timedelta(days=1)):
                            keys_to_delete.append(day_str)
                    except Exception:
                        # –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º
                        keys_to_delete.append(day_str)
                for key in keys_to_delete:
                    del data['daily_limits'][key]
                    changed = True
        except Exception as e:
            logger.error(f"Error pruning old data: {e}")

        return changed
    
    def check_daily_limit(self, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = date.today().isoformat()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        data = self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        if 'daily_limits' not in data:
            data['daily_limits'] = {}
        
        if today not in data['daily_limits']:
            data['daily_limits'][today] = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_messages = data['daily_limits'][today].get(str(user_id), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if user_messages >= DAILY_MESSAGE_LIMIT:
            return False, user_messages
        
        return True, user_messages
    
    def increment_daily_count(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –¥–µ–Ω—å"""
        today = date.today().isoformat()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        data = self.load_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        if 'daily_limits' not in data:
            data['daily_limits'] = {}
        
        if today not in data['daily_limits']:
            data['daily_limits'][today] = {}
        
        if str(user_id) not in data['daily_limits'][today]:
            data['daily_limits'][today][str(user_id)] = 0
        
        data['daily_limits'][today][str(user_id)] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        self.save_data(data)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        query = update.callback_query
        await query.answer()
        
                # –ü–∞—Ä—Å–∏–º callback_data
        if query.data.startswith("info_"):
            parts = query.data.split("_")
            if len(parts) >= 3:
                user_id = parts[1]
                timestamp = parts[2]
                key = f"{user_id}_{timestamp}"
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
                data = self.load_data()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞
                found_key = None
                if 'user_info' in data and key in data['user_info']:
                    found_key = key
                else:
                    # –ò—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if 'user_info' in data:
                        user_keys = [k for k in data['user_info'].keys() if k.startswith(f"{user_id}_")]
                        if user_keys:
                            # –±–µ—Ä–µ–º –∑–∞–ø–∏—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º timestamp –≤ –∫–ª—é—á–µ
                            try:
                                found_key = max(user_keys, key=lambda k: float(k.split("_")[1]))
                            except Exception:
                                found_key = user_keys[-1]
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                logger.info(f"Looking for key: {key}")
                logger.info(f"Available keys: {list(data.get('user_info', {}).keys())}")
                logger.info(f"Found key: {found_key}")
                
                if found_key and 'user_info' in data and found_key in data['user_info']:
                    user_data = data['user_info'][found_key]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    sender_info = f"üë§ –û—Ç: {user_data['first_name']}"
                    if user_data['last_name']:
                        sender_info += f" {user_data['last_name']}"
                    if user_data['username']:
                        sender_info += f" (@{user_data['username']})"
                    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                    if user_data.get('user_id') is not None:
                        sender_info += f"      [ID: {user_data['user_id']}]"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if user_data.get('message_text'):
                        sender_info += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_data['message_text']}"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    from datetime import datetime
                    time_str = datetime.fromtimestamp(user_data['timestamp']).strftime('%d.%m.%Y %H:%M:%S')
                    sender_info += f"\nüïê –í—Ä–µ–º—è: {time_str}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=sender_info,
                        reply_to_message_id=query.message.message_id
                    )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n–ö–ª—é—á: {key}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(data.get('user_info', {}).keys())}",
                        reply_to_message_id=query.message.message_id
        )
    
    async def forward_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await self.forward_to_group(update, context, "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    async def forward_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        await self.forward_to_group(update, context, "–º–µ–¥–∏–∞—Ñ–∞–π–ª")
    
    async def forward_to_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message_type: str):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"""
        if not TARGET_GROUP_ID or TARGET_GROUP_ID == 'YOUR_GROUP_ID_HERE':
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: ID –≥—Ä—É–ø–ø—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TARGET_GROUP_ID –≤ —Ñ–∞–π–ª–µ .env"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        can_send, current_count = self.check_daily_limit(user.id, context)
        if not can_send:
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!\n"
                f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {current_count} –∏–∑ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = update.effective_chat
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.increment_daily_count(user.id, context)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_info = f"üë§ –û—Ç: {user.first_name}"
            if user.last_name:
                sender_info += f" {user.last_name}"
            if user.username:
                sender_info += f" (@{user.username})"
            
            
            sender_info += f"\nüïê –í—Ä–µ–º—è: {update.message.date.strftime('%d.%m.%Y %H:%M:%S')}"
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            if update.message.text:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                user_data = {
                    'user_id': user.id,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'username': user.username,
                    'message_text': update.message.text,
                    'timestamp': update.message.date.timestamp()
                }
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                await context.bot.send_message(
                    chat_id=TARGET_GROUP_ID,
                    text=update.message.text,
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
                data = self.load_data()
                if 'user_info' not in data:
                    data['user_info'] = {}
                key = f"{user.id}_{update.message.date.timestamp()}"
                data['user_info'][key] = user_data
                self.save_data(data)
                logger.info(f"Saved user data with key: {key}")
                logger.info(f"User data: {user_data}")
            else:
                # –ú–µ–¥–∏–∞—Ñ–∞–π–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
                if update.message.photo:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    user_data = {
                        'user_id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'message_text': update.message.caption if update.message.caption else None,
                        'timestamp': update.message.date.timestamp()
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                caption = update.message.caption if update.message.caption else None
                sent_message = await context.bot.send_photo(
                    chat_id=TARGET_GROUP_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=caption,
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
                data = self.load_data()
                if 'user_info' not in data:
                    data['user_info'] = {}
                key = f"{user.id}_{update.message.date.timestamp()}"
                data['user_info'][key] = user_data
                self.save_data(data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                if 'user_info' not in context.bot_data:
                    context.bot_data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    context.bot_data['user_info'][key] = user_data
                    logger.info(f"Saved user data with key: {key}")
                    logger.info(f"User data: {user_data}")
                elif update.message.video:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    user_data = {
                        'user_id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'message_text': update.message.caption if update.message.caption else None,
                        'timestamp': update.message.date.timestamp()
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    caption = update.message.caption if update.message.caption else None
                    await context.bot.send_video(
                        chat_id=TARGET_GROUP_ID,
                        video=update.message.video.file_id,
                        caption=caption,
                        reply_markup=reply_markup
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
                    data = self.load_data()
                    if 'user_info' not in data:
                        data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    data['user_info'][key] = user_data
                    self.save_data(data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                    if 'user_info' not in context.bot_data:
                        context.bot_data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    context.bot_data['user_info'][key] = user_data
                    logger.info(f"Saved user data with key: {key}")
                    logger.info(f"User data: {user_data}")
                elif update.message.document:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    user_data = {
                        'user_id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'message_text': update.message.caption if update.message.caption else None,
                        'timestamp': update.message.date.timestamp()
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π
                    await context.bot.send_document(
                        chat_id=TARGET_GROUP_ID,
                        document=update.message.document.file_id,
                        reply_markup=reply_markup
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
                    data = self.load_data()
                    if 'user_info' not in data:
                        data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    data['user_info'][key] = user_data
                    self.save_data(data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                    if 'user_info' not in context.bot_data:
                        context.bot_data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    context.bot_data['user_info'][key] = user_data
                    logger.info(f"Saved user data with key: {key}")
                    logger.info(f"User data: {user_data}")
                elif update.message.audio:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    user_data = {
                        'user_id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'message_text': update.message.caption if update.message.caption else None,
                        'timestamp': update.message.date.timestamp()
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–æ–π
                    await context.bot.send_audio(
                        chat_id=TARGET_GROUP_ID,
                        audio=update.message.audio.file_id,
                        reply_markup=reply_markup
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
                    data = self.load_data()
                    if 'user_info' not in data:
                        data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    data['user_info'][key] = user_data
                    self.save_data(data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                    if 'user_info' not in context.bot_data:
                        context.bot_data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    context.bot_data['user_info'][key] = user_data
                    logger.info(f"Saved user data with key: {key}")
                    logger.info(f"User data: {user_data}")
                elif update.message.voice:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    user_data = {
                        'user_id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'username': user.username,
                        'message_text': update.message.caption if update.message.caption else None,
                        'timestamp': update.message.date.timestamp()
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    keyboard = [[InlineKeyboardButton("üîç –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"info_{user.id}_{update.message.date.timestamp()}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await context.bot.send_voice(
                        chat_id=TARGET_GROUP_ID,
                        voice=update.message.voice.file_id,
                        reply_markup=reply_markup
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª (–∫–∞–∫ –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
                    data = self.load_data()
                    if 'user_info' not in data:
                        data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    data['user_info'][key] = user_data
                    self.save_data(data)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                    if 'user_info' not in context.bot_data:
                        context.bot_data['user_info'] = {}
                    key = f"{user.id}_{update.message.date.timestamp()}"
                    context.bot_data['user_info'][key] = user_data
                    logger.info(f"Saved user data with key: {key}")
                    logger.info(f"User data: {user_data}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–µ
            remaining = DAILY_MESSAGE_LIMIT - (current_count + 1)
            if message_type == "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
                await update.message.reply_text(
                    f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                    f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}"
                )
            else:
                await update.message.reply_text(
                            f"‚úÖ {message_type.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                            f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}"
                )
            
            logger.info(f"Message forwarded from {user.id} to group {TARGET_GROUP_ID}")
            
        except TelegramError as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {str(e)}"
            await update.message.reply_text(error_message)
            logger.error(f"Telegram error: {e}")
            
        except Exception as e:
            error_message = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            await update.message.reply_text(error_message)
            logger.error(f"Unexpected error: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = "8240511598:AAHSDtyTTUtXpq3UoSuXRCKHeXdpLkjJvTQ"
    
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = MessageForwarderBot(bot_token)
    bot.run()

if __name__ == '__main__':
    main()

